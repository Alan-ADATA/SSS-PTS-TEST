Block Storage Benchmark

This benchmark suite uses fio, scripts for automation and graph/PDF 
generators for reporting to replicate the SNIA Solid State Storage 
(SSS) Performance Test Specification (PTS) Enterprise v1.1. This specification
includes 8 test each measuring different block storage performance 
characteristics. The specification is available here:

http://snia.org/sites/default/files/SSS_PTS_Enterprise_v1.1.pdf

A few notes on cloud/virtualization limitations as they pertain to SNIA test 
specifications:

1. Due to virtualization, direct access to hardware commands like ATA secure 
   erase are generally unavailable in cloud environments. Thus, the recommended  
   Purge methods prescribed by the test specification are generally not 
   feasible in a cloud environment. As a workaround, where supported, full 
   device TRIM is applied prior to preconditioning and testing cycles (using 
   `blkdiscard` for devices and `fstrim` for mounted volumes). If ATA secure 
   erase and TRIM are not supported, devices are zero filled as a last resort. 
   The purge method used is documented in test output. If test targets are 
   rotational devices, zero fill formatting is used instead. Thus, the purge 
   order of precedence is: 1) ATA secure erase; 2) TRIM (SSD only) 3) zero 
   fill. These can be overridden using the nosecureerase, notrim and nozerofill
   test parameters.
2. The test specification requirement for write caches to be disabled cannot 
   be guaranteed in a cloud environment.
3. Often virtual machine block storage devices are partial logical volumes
   on a physical drive that may contain additional logical volumes in use by 
   other users. Because of this, testing may not be across the full LBA of  
   the physical drive (i.e. ActiveRange < 100%). Additionally, the possible  
   shared state of the physical drive may contribute to higher variability
   and difficulty or inability to achieve the prescribed +/-10% condition for 
   Steady State verification. This may also restrict the ability to 
   consistently reproduce results across multiple tests


TESTING PARAMETERS
The SNIA test specification allow for some user configurable parameters. These 
are described below. To start testing, use `run.php`. For runtime options, use 
`run.php --help`. Each of the parameters below may be specified using CLI 
arguments (e.g. `run.php --test=iops`) or `bm_param_` prefixed environment 
variables (e.g. `export bm_param_test=iops`)

* active_range              LBA range to use for testing represented as a 
                            percentage. Default is 100, or 100% per the SNIA
                            test specification. To test across a smaller 
                            range, this parameter may be reduced. If the
                            test targets are not devices, test size is total 
                            free space - 100 MB. WARNING: if multiple volume
                            type targets are specified, active range will be 
                            limited to the least amount of free space on all 
                            targets
                            
* fio                       Optional explicit path to the fio command - 
                            otherwise fio in PATH will be used
                            
* fio_*                     Optional fio runtime parameters. By default, fio 
                            parameters are generated by the test script per 
                            the SNIA test specification. Use this parameter to 
                            override default fio settings 
                            (e.g. fio_ioengine=sync)
                            
* font_size                 The base font size pt to use in reports and graphs. 
                            All text will be relative to this size (i.e. 
                            smaller, larger). Default is 9. Graphs use this 
                            value + 4 (i.e. default 13). Open Sans is included
                            with this software. To change this, simply replace
                            the reports/font.ttf file with your desired font
                            
* highcharts_js_url         URL to highcharts.js. Highcharts is used to render
                            3D charts in reports. Use 'no3dcharts' to disable 
                            3D charts. Default for this parameter is
                            http://code.highcharts.com/highcharts.js
                            
* highcharts3d_js_url       URL to highcharts-3d.js. Highcharts is used to 
                            render 3D charts in reports. Use 'no3dcharts' to 
                            disable 3D charts. Default for this parameter is
                            http://code.highcharts.com/highcharts-3d.js
                            
* jquery_url                URL for jquery. jquery is used by Highcharts.
                            Highcharts is used to render 3D charts in reports. 
                            Use 'no3dcharts' to disable 3D charts. Default for 
                            this parameter is
                            http://code.jquery.com/jquery-2.1.0.min.js
                            
* meta_compute_service      The name of the compute service this test pertains
                            to. Used for report headers. May also be specified 
                            using the environment variable bm_compute_service

* meta_cpu                  CPU descriptor to use for report headers. If not 
                            specified, it will be set using the 'model name' 
                            attribute in /proc/cpuinfo
                            
* meta_drive_interface      Optional drive interface descriptor to use for 
                            report headers (e.g. SATA 6Gb/s)

* meta_drive_model          Optional drive model descriptor to use for report
                            headers (e.g. Intel DC S3700)

* meta_drive_type           Optional drive type descriptor to use for report 
                            headers (e.g. SATA, SSD, PCIe)
                            
* meta_instance_id          The compute service instance type this test pertains 
                            to (e.g. c3.xlarge). Used for report headers
                            
* meta_memory               Memory descriptor to use for report headers. If not 
                            specified, the amount of memory will be used (as 
                            reported by 'free')
                            
* meta_notes_storage        Optional notes to display in the Storage Platform 
                            header column
                            
* meta_notes_test           Optional notes to display in the Test Platform 
                            header column
                            
* meta_os_info              Operating system descriptor to use for report 
                            headers. If not specified, this meta data will be 
                            derived from the first line of /etc/issue
                            
* meta_provider             The name of the cloud provider this test pertains
                            to. Used for report headers. May also be specified 
                            using the environment variable bm_provider

* meta_region               The compute service region this test pertains to. 
                            Used for report headers. May also be specified 
                            using the environment variable bm_region
                            
* meta_storage_config       Storage configuration descriptor to use for report 
                            headers. If not specified, 'Unknown' will be 
                            displayed in this column
                            
* meta_storage_vol_info     If testing is against a volume, this optioanl 
                            parameter may be used to designate setup of that 
                            volume (e.g. Raid, File System, etc.). Only 
                            displayed when targets are volumes. If this
                            parameter is not specified the file system type 
                            for each target volume will be included in this 
                            column
                            
* meta_test_id              Identifier for the test. Used for report headers. 
                            If not specified, this header column will be blank
                            
* meta_test_sw              Name/version of the test software. Used for report 
                            headers. If not specified, this header column will 
                            be blank
                            
* no3dcharts                Don't generate 3D charts. Unlike 2D charts rendered 
                            with the free chart utility gnuplot, 3D charts are 
                            rendered using highcharts - a commercial javascript
                            charting tool. highcharts is available for free for 
                            non-commercial and development use, and for a 
                            nominal fee otherwise. See http://www.highcharts.com
                            for additional licensing information
                            
* nojson                    Don't generate JSON result or fio output files
                            
* nopdfreport               Don't generate PDF version of test report - 
                            report.pdf. (wkhtmltopdf dependency removed if 
                            specified)
                            
* noprecondition            Don't perform the default 2X 128K sequential 
                            workload independent preconditioning (per the SNIA 
                            test specification). This step precedes workload 
                            dependent preconditioning
                            
* nopurge                   Don't require a purge for testing. If this 
                            parameter is not set, and at least 1 target could 
                            not be purged, testing will abort. This parameter
                            is implicit if --nosecureerase, --notrim and 
                            --nozerofill are all specified
                            
* norandom                  Don't test using random (less compressible) data.
                            Use of random data for IO is a requirement of the 
                            SNIA test specification
                            
* noreport                  Don't generate html or PDF test reports - 
                            report.zip and report.pdf (gnuplot, wkhtmltopdf and
                            zip dependencies removed if specified)
                            
* nosecureerase             Don't attempt to secure erase device targets prior 
                            to test cycles (this is the first choice - hdparm 
                            dependency removed if specified). This parameter is
                            implicit if --secureerase_pswd is not provided
                            
* notrim                    Don't attempt to TRIM devices/volumes prior to 
                            testing cycles (util-linux dependency removed if 
                            specified)
                            
* nozerofill                Don't zero fill rotational devices (or SSD devices 
                            when TRIM is not supported) prior to testing 
                            cycles. Zero fill applies only to device targets
                            

* oio_per_thread            The outstanding IO per thread (a.k.a. queue depth). 
                            This translates to the fio `iodepth` parameter. 
                            Total outstanding IO for a given test is 
                            `threads` * `threads_oio`. Per the SNIA test 
                            specification, this is a user definable parameter. 
                            For latency tests, this parameter is a fixed value
                            of 1. Default value for this parameter is 32
                            
* output                    The output directory to use for writing test artifacts 
                            (JSON and reports). If not specified, the current 
                            working directory will be used
                            
* precondition_passes       Number of passes for workload independent 
                            preconditioning. Per the SNIA test specification 
                            the default is 2X. Use this or the --noprecondition
                            argument to change this default behavior
                            
* secureerase_pswd          In order for ATA secure erase to be attempted for 
                            device purge (prior to test invocation), you must
                            first set a security password using the command:
                            sudo hdparm --user-master u --security-set-pass [pswd] /dev/[device]
                            The password used should be supplied using this 
                            test parameter. If it is not supplied, ATA secure
                            erase will not be attempted. If this parameter is 
                            not specified, the hdparm dependent will be removed
                            
* skip_blocksize            block sizes to skip during testing. This argument 
                            may be repeated. Valid options are:
                            1m, 128k, 64k, 32k, 16k, 8k, 512b
                            
* skip_workload             workloads to skip during testing. This argument may
                            be repeated. Valid options are:
                            100/0, 95/5, 65/35, 50/50, 35/65, 5/95
                            
* ss_rounds                 The maximum number of test cycle iterations to 
                            allow for steady state verification. Default is 
                            x=25 (per the SNIA test specification). If steady 
                            state cannot be reached within this number of test 
                            cycles (per the ss_verification ratio), testing 
                            will terminate, and results will be designated as 
                            having not achieved steady state. This parameter 
                            may be used to increase (or decrease) the number of 
                            test cycles. A minimum value of 5 is permitted 
                            (the minimum number of cycles for the measurement 
                            window)
                            
* ss_verification           Ratio to utilize for steady state verification. The 
                            default is 10 or 10% per the SNIA test 
                            specification. In order to achieve steady state 
                            verification, the variance between the current test 
                            cycle loop and the 4 that precede it cannot exceed 
                            this value. In cloud environments with high IO 
                            variability, it may be difficult to achieve the 
                            default ratio and thus this value may be increased 
                            using this parameter
                            
* target                    REQUIRED: The target device or volume to use for 
                            testing. This parameter may reference either the 
                            physical device (e.g. /dev/sdc) or a mounted volume
                            (e.g. /ssd). TRIM will be attempted using 
                            `blkdiscard` for a device and `fstrim` for a volume
                            if the targets are non-rotational. For rotational 
                            devices, a zero fill will be used (i.e. 
                            `dd if=/dev/zero`). Multiple targets may be 
                            specified each separated by a comma. When multiple 
                            targets are specified, the `threads` parameter 
                            represents the number of threads per target (i.e. 
                            total threads = # of targets * `threads`). Multiple 
                            target tests provide aggregate metrics. With the 
                            exception of latency tests, if multiple targets are 
                            specified, they will be tested concurrently. 
                            Sufficient permissions for the device/volume must 
                            exist for the user that initiates testing. 
                            WARNING: If a device is specified (e.g. /dev/sdc),
                            all data on that device will be erased during the 
                            course of testing. All targets must be of the same 
                            type (device or volume). WARNING: if multiple 
                            volume type targets are specified, active range 
                            will be limited to the least amount of free space 
                            on all targets
                            
* test                      The SNIA SSS PTS tests to perform. One or more of 
                            the following:
                              iops:       IOPS Test - measures IOPS at a range 
                                          of random block sizes and read/write 
                                          mixes
                              throughput: Throughput Test - measures 128k and 
                                          1m sequential read and write 
                                          throughput (MB/s) in steady state
                              latency:    Latency Test - measures IO response 
                                          times for 3 block sizes (0.5k, 4k and 
                                          8k), and 3 read/write mixes (100/0, 
                                          65/35 and 0/100). If multiple 
                                          `target` devices or volumes are 
                                          specified, latency tests are 
                                          performed sequentially
                              wsat:       Write Saturation Test - measures how 
                                          drives respond to continuous 4k 
                                          random writes over time and total GB 
                                          written (TGBW). NOTE: this 
                                          implementation uses the alternate 
                                          steady state test method (1 minute SS
                                          checks interspersed by 30 minute WSAT
                                          test intervals)
                              hir:        Host Idle Recovery - observes whether 
                                          the devices utilizes background 
                                          garbage collection wherein 
                                          performance increases with the 
                                          introduction of host idle times 
                                          between periods of 4k random writes
                              xsr:        Cross Stimulus Recovery - tests how 
                                          the device handles transitions from 
                                          large block sequential writes to 
                                          small block random writes and back
                                          NOT YET IMPLEMENTED
                              ecw:        Enterprise Composite Workload - 
                                          measures performance in a mixed IO 
                                          environment
                                          NOT YET IMPLEMENTED
                              dirth:      Demand Intensity / Response Time 
                                          Histogram - measures performance 
                                          degradation when a device is subject 
                                          to a super saturating IO load
                                          NOT YET IMPLEMENTED
                            Multiple tests may be specified each separated by 
                            a comma. Default for this parameter is iops. Some 
                            tests like 'hir' are specific to SSD type devices
                            
* threads                   The number of threads to use for the test cycle. 
                            Per the SNIA test specification, this is a user 
                            definable parameter. The default value for this 
                            parameter is the number of CPU cores. This 
                            parameter may contain the token {cpus} which will 
                            be replaced with the number of CPU cores present. 
                            It may also contain a mathematical expression in 
                            conjunction with {cpus} - e.g. {cpus}/2. If 
                            `target` references multiple devices or volumes, 
                            this parameter signifies the number of threads per 
                            device. Thus total threads is # of targets * 
                            `threads`. Latency tests are fixed at 1 thread. 
                            This parameter is used to define the fio --numjobs
                            argument
                            
* threads_per_target_max    The maximum number of threads per target - default
                            is 4
                            
* timeout                   Max time to permit for testing in seconds. Default 
                            is 24 hours (86400 seconds)
                            
* trim_offset_end           When invoking a blkdiscard TRIM, offset the lenth
                            by this number of bytes
                            
* verbose                   Show verbose output - warning: this may produce a 
                            lot of output
                            
* wd_test_duration          The test duration for workload dependent test 
                            iterations in seconds. Default is 60 per the SNIA 
                            test specification
                            
                            
DEPENDENCIES
This benchmark suite uses the following packages:

  fio         Performs actual testing - version 2.1+ required
  gnuplot     Generates graphs per the SNIA test specification. These graphs
              are used in the PDF report
  hdparm      Used for ATA secure erase (when supported)
  php-cli     Scripting for automation of test logic (/usr/bin/php)
  util-linux  For TRIM operations using `blkdiscard` and `fstrim` (when 
              supported). Not required if test targets are rotational
  wkhtmltopdf Generates PDF version of report - download from 
              http://wkhtmltopdf.org
  zip         Archives HTML test report into a single zip file


TEST ARTIFACTS
Upon successful completion of testing, the following artifacts will be 
produced in the working directory ([test] replaced with one of the test 
identifiers - e.g. report-iops.json):

  [test].json        JSON formatted job results for [test]. Each test provides 
                     different result metrics. This file contains a single 
                     level hash of key/value pairs representing these metrics
  fio-[test].json    JSON formatted fio job results for [test]. Jobs are 
                     in run order each with a unique job name. For workload 
                     independent preconditioning, the job name uses the 
                     format 'wipc-N', where N is the preconditioning pass
                     (i.e. N=1 is first pass, N=2 second). Unless 
                     --precondition_passes is otherwise specified, only 2 wipc 
                     JSON files should be present (each representing one of the 
                     2X preconditioning tests). For workload dependent 
                     preconditioning and other testing, the job name is set by
                     the test. For example, for the IOPS test, the job name 
                     format is 'xN-[rw]-[bs]-rand', where N is iteration 
                     number (1-25+), [rw] is the read/write ratio (separated by 
                     underscore) and [bs] is block size. Jobs that fall within
                     the steady state measurement window will have the suffix 
                     '-ssmw' (e.g. x5-0_100-4k-rand-ssmw). there may be up to 
                     10 fio-[test].json corresponding with each of the tests 
                     and 2 files for throughput: test-throughput-128k.json and
                     test-throughput-1024k.json
  report.zip         HTML test report (open index.html). The report design
                     and layout is based on the SNIA test specification. In 
                     addition, this archive contains source gnuplot scripts and 
                     data files for report graphs. Graphs are rendered in svg 
                     format
  report.pdf         PDF version of the test report (wkhtmltopdf used to 
                     generate this version of the report)


USAGE
# perform IOPS test against device /dev/sdc
./run.sh --target=/dev/sdc --test=iops

# perform IOPS, Latency and Throughput tests against /dev/sdc and /dev/sdd 
# concurrently using a maximum of [num CPU cores]*2 and 32 OIO per thread
./run.sh --target=/dev/sdc --target=/dev/sdd --test=iops --test=latency --test=throughput --threads="{cpu}*2" --oio_per_thread=32

# perform IOPS test against device /dev/sdc but skip the purge step
./run.sh --target=/dev/sdc --test=iops --nopurge

# perform IOPS test against device /dev/sdc but skip the purge and workload 
# independent preconditioning
./run.sh --target=/dev/sdc --test=iops --nopurge --noprecondition


RESULTS OUTPUT
Running parse.sh with the path to the results directory produces the output 
below (e.g. ./parse.sh /path/to/results). _n will be an incrementing value for 
each job. Test specific output is repeated for each fio job included in that 
test.

test_n=[test type]

# IOPS test output (all random IO)
test_iops_steady_state_start_n=[test iteration when steady state began]
test_iops_1m_100_0_n=[mean 1m read IOPS in steady state]
test_iops_128k_100_0_n=[mean 128k read IOPS in steady state]
test_iops_64k_100_0_n=[mean 64k read IOPS in steady state]
test_iops_32k_100_0_n=[mean 32k read IOPS in steady state]
test_iops_16k_100_0_n=[mean 16k read IOPS in steady state]
test_iops_8k_100_0_n=[mean 8k read IOPS in steady state]
test_iops_4k_100_0_n=[mean 4k read IOPS in steady state]
test_iops_512b_100_0_n=[mean 512b read IOPS in steady state]
test_iops_1m_95_5_n=[mean 1m 95/5 rw IOPS in steady state]
test_iops_128k_95_5_n=[mean 128k 95/5 rw IOPS in steady state]
test_iops_64k_95_5_n=[mean 64k 95/5 rw IOPS in steady state]
test_iops_32k_95_5_n=[mean 32k 95/5 rw IOPS in steady state]
test_iops_16k_95_5_n=[mean 16k 95/5 rw IOPS in steady state]
test_iops_8k_95_5_n=[mean 8k 95/5 rw IOPS in steady state]
test_iops_4k_95_5_n=[mean 4k 95/5 rw IOPS in steady state]
test_iops_512b_95_5_n=[mean 512b 95/5 rw IOPS in steady state]
test_iops_1m_65_35_n=[mean 1m 65/35 rw IOPS in steady state]
test_iops_128k_65_35_n=[mean 128k 65/35 rw IOPS in steady state]
test_iops_64k_65_35_n=[mean 64k 65/35 rw IOPS in steady state]
test_iops_32k_65_35_n=[mean 32k 65/35 rw IOPS in steady state]
test_iops_16k_65_35_n=[mean 16k 65/35 rw IOPS in steady state]
test_iops_8k_65_35_n=[mean 8k 65/35 rw IOPS in steady state]
test_iops_4k_65_35_n=[mean 4k 65/35 rw IOPS in steady state]
test_iops_512b_65_35_n=[mean 512b 65/35 rw IOPS in steady state]
test_iops_1m_50_50_n=[mean 1m 50/50 rw IOPS in steady state]
test_iops_128k_50_50_n=[mean 128k 50/50 rw IOPS in steady state]
test_iops_64k_50_50_n=[mean 64k 50/50 rw IOPS in steady state]
test_iops_32k_50_50_n=[mean 32k 50/50 rw IOPS in steady state]
test_iops_16k_50_50_n=[mean 16k 50/50 rw IOPS in steady state]
test_iops_8k_50_50_n=[mean 8k 50/50 rw IOPS in steady state]
test_iops_4k_50_50_n=[mean 4k 50/50 rw IOPS in steady state]
test_iops_512b_50_50_n=[mean 512b 50/50 rw IOPS in steady state]
test_iops_1m_35_65_n=[mean 1m 35/65 rw IOPS in steady state]
test_iops_128k_35_65_n=[mean 128k 35/65 rw IOPS in steady state]
test_iops_64k_35_65_n=[mean 64k 35/65 rw IOPS in steady state]
test_iops_32k_35_65_n=[mean 32k 35/65 rw IOPS in steady state]
test_iops_16k_35_65_n=[mean 16k 35/65 rw IOPS in steady state]
test_iops_8k_35_65_n=[mean 8k 35/65 rw IOPS in steady state]
test_iops_4k_35_65_n=[mean 4k 35/65 rw IOPS in steady state]
test_iops_512b_35_65_n=[mean 512b 35/65 rw IOPS in steady state]
test_iops_1m_5_95_n=[mean 1m 5/95 rw IOPS in steady state]
test_iops_128k_5_95_n=[mean 128k 5/95 rw IOPS in steady state]
test_iops_64k_5_95_n=[mean 64k 5/95 rw IOPS in steady state]
test_iops_32k_5_95_n=[mean 32k 5/95 rw IOPS in steady state]
test_iops_16k_5_95_n=[mean 16k 5/95 rw IOPS in steady state]
test_iops_8k_5_95_n=[mean 8k 5/95 rw IOPS in steady state]
test_iops_4k_5_95_n=[mean 4k 5/95 rw IOPS in steady state]
test_iops_512b_5_95_n=[mean 512b 5/95 rw IOPS in steady state]
test_iops_1m_0_100_n=[mean 1m write IOPS in steady state]
test_iops_128k_0_100_n=[mean 128k write IOPS in steady state]
test_iops_64k_0_100_n=[mean 64k write IOPS in steady state]
test_iops_32k_0_100_n=[mean 32k write IOPS in steady state]
test_iops_16k_0_100_n=[mean 16k write IOPS in steady state]
test_iops_8k_0_100_n=[mean 8k write IOPS in steady state]
test_iops_4k_0_100_n=[mean 4k write IOPS in steady state]
test_iops_512b_0_100_n=[mean 512b write IOPS in steady state]

# Throughput test output (all sequential IO)
test_throughput_steady_state_start_n=[test iteration when steady state began]
test_throughput_1024k_100_0_n=[mean 1024k read throughput - MB/s]
test_throughput_1024k_0_100_n=[mean 1024k write throughput - MB/s]
test_throughput_128k_100_0_n=[mean 128k write throughput - MB/s]
test_throughput_128k_0_100_n=[mean 128k write throughput - MB/s]

# Latency test output (all milliseconds)
test_latency_steady_state_start_n=[test iteration when steady state began]
test_latency_8k_100_0_mean_n=[mean 8k read latency]
test_latency_8k_100_0_max_n=[max 8k read latency]
test_latency_4k_100_0_mean_n=[mean 4k read latency]
test_latency_4k_100_0_max_n=[max 8k read latency]
test_latency_512b_100_0_mean_n=[mean 512b read latency]
test_latency_512b_100_0_max_n=[max 512b read latency]
test_latency_8k_65_35_mean_n=[mean 8k 65/35 rw latency]
test_latency_8k_65_35_max_n=[max 8k 65/35 rw latency]
test_latency_4k_65_35_mean_n=[mean 4k 65/35 rw latency]
test_latency_4k_65_35_max_n=[max 4k 65/35 rw latency]
test_latency_512b_65_35_mean_n=[mean 512b 65/35 rw latency]
test_latency_512b_65_35_max_n=[max 512b 65/35 rw latency]
test_latency_8k_0_100_mean_n=[mean 8k write latency]
test_latency_8k_0_100_max_n=[max 8k write latency]
test_latency_4k_0_100_mean_n=[mean 4k write latency]
test_latency_4k_0_100_max_n=[max 4k write latency]
test_latency_512b_0_100_mean_n=[mean 512b write latency]
test_latency_512b_0_100_max_n=[max 512b write latency]

# WSAT test output
test_wsat_steady_state_start_n=[test iteration when steady state began]
test_wsat_iops=[mean 4k write IOPS in steady state]

# HIR test output
test_hir_steady_state_start_n=[test iteration when steady state began]
test_hir_steady_state_iops_n=[mean 4k rand write IOPS during steady state phase of preconditioning]
test_hir_wait_5s_iops_n=[mean 4k rand write IOPS during testing with 5 second wait intervals]
test_hir_wait_10s_iops_n=[mean 4k rand write IOPS during testing with 10 second wait intervals]
test_hir_wait_15s_iops_n=[mean 4k rand write IOPS during testing with 15 second wait intervals]
test_hir_wait_25s_iops_n=[mean 4k rand write IOPS during testing with 25 second wait intervals]
test_hir_wait_50s_iops_n=[mean 4k rand write IOPS during testing with 50 second wait intervals]

# XSR test output
Test not implemented

# ECW test output
Test not implemented

# DIRTH test output
Test not implemented

# fio test output
jobname_n=[the job name - workload independent preconditioning use 'wipc' prefix]
read_io_bytes_n=[read IO - KB]
read_bw_n=[read bandwidth - KB/s]
read_iops_n=[read IOPS]
read_runtime_n=[read runtime - ms]
read_slat_min_n=[min read submission latency - μs]
read_slat_max_n=[max read submission latency - μs]
read_slat_mean_n=[mean read submission latency - μs]
read_slat_stddev_n=[read submission latency standard deviation - μs]
read_clat_min_n=[min read completion latency - μs]
read_clat_max_n=[max read completion latency - μs]
read_clat_mean_n=[mean read completion latency - μs]
read_clat_stddev_n=[read completion standard deviation - μs]
read_clat_percentile_1_n=[1st percentile read completion latency - μs]
read_clat_percentile_5_n=[5th percentile read completion latency - μs]
read_clat_percentile_10_n=[10th percentile read completion latency - μs]
read_clat_percentile_20_n=[20th percentile read completion latency - μs]
read_clat_percentile_30_n=[30th percentile read completion latency - μs]
read_clat_percentile_40_n=[40th percentile read completion latency - μs]
read_clat_percentile_50_n=[50th percentile read completion latency - μs]
read_clat_percentile_60_n=[60th percentile read completion latency - μs]
read_clat_percentile_70_n=[70th percentile read completion latency - μs]
read_clat_percentile_80_n=[80th percentile read completion latency - μs]
read_clat_percentile_90_n=[90th percentile read completion latency - μs]
read_clat_percentile_95_n=[95th percentile read completion latency - μs]
read_clat_percentile_99_n=[99th percentile read completion latency - μs]
read_clat_percentile_99_5_n=[99.5th percentile read completion latency - μs]
read_clat_percentile_99_9_n=[99.9th percentile read completion latency - μs]
read_clat_percentile_99_95_n=[99.95th percentile read completion latency - μs]
read_clat_percentile_99_99_n=[99.99th percentile read completion latency - μs]
read_lat_min_n=[min total read latency - μs]
read_lat_max_n=[max total read latency - μs]
read_lat_mean_n=[mean total read latency - μs]
read_lat_stddev_n=[total read latency standard deviation - μs]
read_bw_min_n=[min read bandwidth - KB/s]
read_bw_max_n=[max read bandwidth - KB/s]
read_bw_agg_n=[aggregate read bandwidth - KB/s]
read_bw_mean_n=[mean read bandwidth - KB/s]
read_bw_dev_n=[read bandwidth standard deviation - KB/s]
write_io_bytes_n=[write IO - KB]
write_bw_n=[write bandwidth - KB/s]
write_iops_n=[write IOPS]
write_runtime_n=[write runtime - ms]
write_slat_min_n=[min write submission latency - μs]
write_slat_max_n=[max write submission latency - μs]
write_slat_mean_n=[mean write submission latency - μs]
write_slat_stddev_n=[write submission latency standard deviation - μs]
write_clat_min_n=[min write completion latency - μs]
write_clat_max_n=[max write completion latency - μs]
write_clat_mean_n=[mean write completion latency - μs]
write_clat_stddev_n=[write completion standard deviation - μs]
write_clat_percentile_1_n=[1st percentile write completion latency - μs]
write_clat_percentile_5_n=[5th percentile write completion latency - μs]
write_clat_percentile_10_n=[10th percentile write completion latency - μs]
write_clat_percentile_20_n=[20th percentile write completion latency - μs]
write_clat_percentile_30_n=[30th percentile write completion latency - μs]
write_clat_percentile_40_n=[40th percentile write completion latency - μs]
write_clat_percentile_50_n=[50th percentile write completion latency - μs]
write_clat_percentile_60_n=[60th percentile write completion latency - μs]
write_clat_percentile_70_n=[70th percentile write completion latency - μs]
write_clat_percentile_80_n=[80th percentile write completion latency - μs]
write_clat_percentile_90_n=[90th percentile write completion latency - μs]
write_clat_percentile_95_n=[95th percentile write completion latency - μs]
write_clat_percentile_99_n=[99th percentile write completion latency - μs]
write_clat_percentile_99_5_n=[99.5th percentile write completion latency - μs]
write_clat_percentile_99_9_n=[99.9th percentile write completion latency - μs]
write_clat_percentile_99_95_n=[99.95th percentile write completion latency - μs]
write_clat_percentile_99_99_n=[99.99th percentile write completion latency - μs]
write_lat_min_n=[min total write latency - μs]
write_lat_max_n=[max total write latency - μs]
write_lat_mean_n=[mean total write latency - μs]
write_lat_stddev_n=[total write latency standard deviation - μs]
write_bw_min_n=[min write bandwidth - KB/s]
write_bw_max_n=[max write bandwidth - KB/s]
write_bw_agg_n=[aggregate write bandwidth - KB/s]
write_bw_mean_n=[mean write bandwidth - KB/s]
write_bw_dev_n=[write bandwidth standard deviation - KB/s]
usr_cpu_n=[user CPU usage]
sys_cpu_n=[system CPU usage]
ctx_n=[CPU context switches]
majf_n=[major page faults]
minf_n=[minor page faults]
iodepth_level_1_n=[distribution of IO with IO depth <= 1]
iodepth_level_2_n=[distribution of IO with IO depth 2]
iodepth_level_4_n=[distribution of IO with IO depth 4]
iodepth_level_8_n=[distribution of IO with IO depth 8]
iodepth_level_16_n=[distribution of IO with IO depth 16]
iodepth_level_32_n=[distribution of IO with IO depth 32]
iodepth_level_gte64_n=[distribution of IO with IO depth >= 64]
latency_us_2_n=[distribution of IO with latency <= 2 microseconds]
latency_us_4_n=[distribution of IO with latency >2 and <=4 microseconds]
latency_us_10_n=[distribution of IO with latency >4 and <=10 microseconds]
latency_us_20_n=[distribution of IO with latency >10 and <=20 microseconds]
latency_us_50_n=[distribution of IO with latency >20 and <=50 microseconds]
latency_us_100_n=[distribution of IO with latency >50 and <=100 microseconds]
latency_us_250_n=[distribution of IO with latency >100 and <=250 microseconds]
latency_us_500_n=[distribution of IO with latency >250 and <=500 microseconds]
latency_us_750_n=[distribution of IO with latency >500 and <=750 microseconds]
latency_us_1000_n=[distribution of IO with latency >750 and <=1000 microseconds]
latency_ms_2_n=[distribution of IO with latency >1000 microseconds and <=2 milliseconds]
latency_ms_4_n=[distribution of IO with latency >2 and <=4 milliseconds]
latency_ms_10_n=[distribution of IO with latency >4 and <=10 milliseconds]
latency_ms_20_n=[distribution of IO with latency >10 and <=20 milliseconds]
latency_ms_50_n=[distribution of IO with latency >20 and <=50 milliseconds]
latency_ms_100_n=[distribution of IO with latency >50 and <=100 milliseconds]
latency_ms_250_n=[distribution of IO with latency >100 and <=250 milliseconds]
latency_ms_500_n=[distribution of IO with latency >250 and <=500 milliseconds]
latency_ms_750_n=[distribution of IO with latency >500 and <=750 milliseconds]
latency_ms_1000_n=[distribution of IO with latency >750 and <=1000 milliseconds]
latency_ms_2000_n=[distribution of IO with latency >1000 and <2000 milliseconds]
latency_ms_gte2000_n=[distribution of IO with latency >=2000 milliseconds]
